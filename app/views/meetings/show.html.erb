<div class="show-page-grid">
  <div class="row w-100">
    <div class="timer-box">
      <p class="clock-title">Meeting IQ</p>

      <figure class="clock">
        <div class="mins">0</div>
        <div>:</div>
        <div class="secs">00</div>
        <svg class="progress-ring" height="140" width="140">
          <circle
            class="progress-ring__circle"
            stroke-width="8"
            fill="transparent"
            r="60"
            cx="70"
            cy="70"
          />
        </svg>
      </figure>

      <div class="btn-group" style="margin-top: 80px;">
        <button class="start">start meeting</button>

        <button class="pause">pause</button>
      </div>

      <form class="clock-form" action=".">
        <%# <label for="focusTime">Meeting Duration</label> %>
        <input type="number" value="1" id="focusTime" />
        <%# <button type="submit">Save settings</button> %>
      <%# </form> %>
    </div>
  </div>
  <div class="row w-100">
    <div class="container">
      <div class="row justify-content-center">
        <div class="meeting-card">
          <h2><%= @meeting.title %></h2>
          <p>Organizer: <%= @meeting.user.username %></p>
          <p>Start date: <%= @meeting.expected_start_date.strftime("%H:%M %d/%m/%y") %></p>
          <p>End date: <%= @meeting.expected_end_date.strftime("%H:%M %d/%m/%y") %></p>
          <p id="expected_duration" data-expected-duration="<%= @meeting.expected_duration %>">Expected duration: <%= @meeting.expected_duration %> minutes</p>
          <% if @meeting.actual_start_date.present? %>
            <p>Actual start date: <%= @meeting.actual_start_date.strftime("%H:%M %d/%m/%y") %></p>
            <% else %>
              <p></p>
          <% end %>
          <% if @meeting.actual_end_date.present? %>
            <p>Actual end date: <%= @meeting.actual_end_date.strftime("%H:%M %d/%m/%y") %></p>
            <% else %>
              <p></p>
          <% end %>
          <% if @meeting.actual_duration.present? %>
            <p>Actual duration: <%= @meeting.actual_duration %> minutes</p>
            <% else %>
              <p></p>
          <% end %>
          <p>Participants: <%= @meeting.participants_number %></p>
          <% if @meeting.place.present? %>
            <p>Location: <%= @meeting.place %> </p>
            <% else %>
              <p></p>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>




<%# needed to build as a script because of importing incompatibility %>

<script>
const focusTimeInput = document.querySelector("#focusTime");
const pauseBtn = document.querySelector(".pause");
const expected_duration = document.querySelector("#expected_duration");
localStorage.setItem("focusTime", expected_duration.dataset.expectedDuration);

// console.log(expected_duration.dataset.expectedDuration);
// console.log(focusTimeInput.value);
focusTimeInput.value = localStorage.getItem("focusTime");


// document.querySelector("form").addEventListener("submit", (e) => {
//   e.preventDefault();
//   localStorage.setItem("focusTime", focusTimeInput.value);

// });

pauseBtn.addEventListener("click", () => {
  if (paused === undefined) {
    return;
  }
  if (paused) {
    paused = false;
    initial = setTimeout("decremenT()", 60);
    pauseBtn.textContent = "pause";
    pauseBtn.classList.remove("resume");
  } else {
    clearTimeout(initial);
    pauseBtn.textContent = "resume";
    pauseBtn.classList.add("resume");
    paused = true;
  }
});


const el = document.querySelector(".clock");

const mindiv = document.querySelector(".mins");
const secdiv = document.querySelector(".secs");

const startBtn = document.querySelector(".start");
localStorage.setItem("btn", "focus");

let initial, totalsecs, perc, paused, mins, seconds;

startBtn.addEventListener("click", () => {
  let btn = localStorage.getItem("btn");

  if (btn === "focus") {
    mins = +localStorage.getItem("focusTime") || 1;
  } else {
    mins = +localStorage.getItem("breakTime") || 1;
  }

  seconds = mins * 60;
  totalsecs = mins * 60;
  setTimeout(decremenT(), 60);
  startBtn.style.transform = "scale(0)";
  paused = false;
});

function decremenT() {
  mindiv.textContent = Math.floor(seconds / 60);
  secdiv.textContent = seconds % 60 > 9 ? seconds % 60 : `0${seconds % 60}`;
  if (circle.classList.contains("danger")) {
    circle.classList.remove("danger");
  }

  if (seconds > 0) {
    perc = Math.ceil(((totalsecs - seconds) / totalsecs) * 100);
    setProgress(perc);
    seconds--;
    initial = window.setTimeout("decremenT()", 1000);
    if (seconds < 10) {
      circle.classList.add("danger");
    }
  } else {
    mins = 0;
    seconds = 0;
    bell.play();
    let btn = localStorage.getItem("btn");

    if (btn === "focus") {
      startBtn.textContent = "start break";
      startBtn.classList.add("break");
      localStorage.setItem("btn", "break");
    } else {
      startBtn.classList.remove("break");
      startBtn.textContent = "start focus";
      localStorage.setItem("btn", "focus");
    }
    startBtn.style.transform = "scale(1)";
  }
}


const circle = document.querySelector(".progress-ring__circle");
const radius = circle.r.baseVal.value;
const circumference = radius * 2 * Math.PI;

circle.style.strokeDasharray = circumference;
circle.style.strokeDashoffset = circumference;

function setProgress(percent) {
  const offset = circumference - (percent / 100) * circumference;
  circle.style.strokeDashoffset = offset;
}

</script>
